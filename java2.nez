/**
 * Java 2 Grammar
 *
 * Java 2 is a historical programming language which has been released
 * in 1990s. The language specification is mostly a subset of Java 8.
 * This grammar is specified by eliminating from Java 8 grammars
 * 
 *  - annotation
 *  - generics (parameterized types)
 *  - enum
 *  - lambda
 *
 * [1] https://docs.oracle.com/javase/specs/jls/se8/html/jls-2.html#jls-2.4
 *
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */

File
	= _ 
	{ (@PackageDeclaration)? 
	  (@ImportDeclaration)* 
	  (@TypeDeclaration)* #Source } _ EOT

/* Code Layout (Whitespace) */

_
	= (S / BLOCKCOMMENT / LINECOMMENT )*

S
	= [ \n\r\t]

BLOCKCOMMENT
	= '/*' (!'*/' .)* '*/'

LINECOMMENT
	= '//' (!'\n' .)*

EOL
	= ('\r'? '\n' / !.)

EOT = !.

/* Tokens */

"++"   = '++' _
"--"   = '--' _
"&"    = '&' ![&=] _
"*"    = '*' !'=' _
"+"    = '+' ![+=] _
"-"    = '-' !('-' / [=>]) _
"~"    = '~' _
"!"    = '!' !'=' _

"{"    = '{' _
"["    = '[' _
"]"    = ']' _
","    = ',' _
"..."  = '...' _
":"    = ':' ![>:] _
"::"   = '::' _
"/"    = '/' !'=' _
"%"    = '%' ![=>] _
"<<"   = '<<' !'=' _
">>"   = '>>' ![=>] _
">>>"  = '>>>' !'=' _
"<="   = '<=' _
">="   = '>=' _
"<"    = '<' ![=] _
">"    = '>' ![=] _
"=="   = '==' _
"!="   = '!=' _
"^"    = '^' ![=] _
"|"    = '|' ![|=] _
"&&"   = '&&' _
"||"   = '||' _
"?"    = '?' _
";"    = ';' _
"}"    = '}' _

"*="   = '*=' _
"/="   = '/=' _
"%="   = '%=' _
"+="   = '+=' _
"-="   = '-=' _
"<<="  = '<<=' _
">>="  = '>>=' _
">>>=" = '>>>=' _
"&="   = '&=' _
"^="   = '^=' _
"|="   = '|=' _
"="    = '=' !'=' _
"."    = '.' !'.' _

"("    = '(' _
")"    = ')' _

// reserved keyword
"abstract"     = 'abstract'     !W _
"assert"       = 'assert'       !W _
"boolean"      = 'boolean'      !W _
"break"        = 'break'        !W _
"byte"         = 'byte'         !W _
"case"         = 'case'         !W _
"catch"        = 'catch'        !W _
"char"         = 'char'         !W _
"class"        = 'class'        !W _
"const"        = 'const'        !W _
"continue"     = 'continue'     !W _
"default"      = 'default'      !W _
"do"           = 'do'           !W _
"double"       = 'double'       !W _
"else"         = 'else'         !W _
"enum"         = 'enum'         !W _
"extends"      = 'extends'      !W _
"false"        = 'false'        !W _
"final"        = 'final'        !W _
"finally"      = 'finally'      !W _
"float"        = 'float'        !W _
"for"          = 'for'          !W _
"goto"         = 'goto'         !W _
"if"           = 'if'           !W _
"implements"   = 'implements'   !W _
"import"       = 'import'       !W _
"instanceof"   = 'instanceof'   !W _
"int"          = 'int'          !W _
"interface"    = 'interface'    !W _
"long"         = 'long'         !W _
"native"       = 'native'       !W _
"new"          = 'new'          !W _
"null"         = 'null'         !W _
"package"      = 'package'      !W _
"private"      = 'private'      !W _
"protected"    = 'protected'    !W _
"public"       = 'public'       !W _
"return"       = 'return'       !W _
"short"        = 'short'        !W _
"static"       = 'static'       !W _
"strictfp"     = 'strictfp'     !W _
"super"        = 'super'        !W _
"switch"       = 'switch'       !W _
"synchronized" = 'synchronized' !W _
"this"         = 'this'         !W _
"throw"        = 'throw'        !W _
"throws"       = 'throws'       !W _
"transient"    = 'transient'    !W _
"true"         = 'true'         !W _
"try"          = 'try'          !W _
"void"         = 'void'         !W _
"volatile"     = 'volatile'     !W _
"while"        = 'while'        !W _

KEYWORD
	= "abstract" / "assert" / "boolean" / "break" / "byte" / "case"
	/ "catch" / "char" / "class" / "const" / "continue" / "default"
	/ "double" / "do" / "else" / "enum" / "extends" / "false"
	/ "final" / "finally" / "float" / "for" / "goto" / "if" / "implements"
	/ "import" / "instanceof" / "interface" / "int" / "long" / "native"
	/ "new" / "null" / "package" / "private" / "protected" / "public"
	/ "return" / "short" / "static" / "strictfp" / "super" / "switch"
	/ "synchronized" / "this" / "throws" / "throw" / "transient"
	/ "true" / "try" / "void" / "volatile" / "while"

/* TopLevel */

format #PackageDeclaration[1]      `${NL}}package $[0];`
format #ImportDeclaration[1]       `${NL}import $[0];`
format #WildCardName[1]            `$[0].*`

example PackageDeclaration '''
package nez.lang;
'''

example ImportDeclaration '''
import java.io.*;
'''

public TopLevel
	= PackageDeclaration
	/ ImportDeclaration
	/ TypeDeclaration

public PackageDeclaration
	= { "package" @QualifiedName #PackageDeclaration } ";" 

public ImportDeclaration
	= { "import" @PackageName #ImportDeclaration } ";"

public PackageName
	= QualifiedName {@ "." "*" #WildCardName}?

/* Modifiers */

format #Modifiers[*]    `$[0 ` ` -1] `
format #Modifiers[0]    ``
format #Final[0]        `final`
format #Public[0]       `public`
format #Protected[0]    `protected`
format #Private[0]      `private`
format #Abstract[0]     `abstract`
format #Static[0]       `static`
format #Strictfp[0]     `strictfp`
format #Transient[0]    `transient`
format #Volatile[0]     `volatile`
format #Synchronized[0] `synchronized`

Modifiers
	= { (@Modifier)* #Modifiers }

Modifier
	= { "final"      #Final }
	/ { "public"     #Public }
	/ { "protected"  #Protected }
	/ { "private"    #Private }
	/ { "abstract"   #Abstract }
	/ { "static"     #Static }
	/ { "strictfp"   #Strictfp }	
	/ { "transient"  #Transient }
	/ { "volatile"   #Volatile }
	/ { "synchronized"  #Synchronized }

/* Type Declaration */

format #Class[5]     `$[0]class $[1] extends $[2] implements $[3] $[4]`
format #Class[4]     `$[0]class $[1] extends $[2] $[3]`
format #Interface[4] `$[0]interface $[1] extends $[2] $[3]`
format #Interface[3] `$[0]interface $[1] $[2]`
format #Block[*]     `{${inc}${NL}$[0 `${NL}` -1]${dec}${NL}}`
format #Block[0]     `{${NL}}`
format #Empty[0]     `;`

TypeDeclaration
	= ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

/* Class and interface */

example ClassDeclaration '''
class C {
}
'''

example ClassDeclaration '''
public class C extends D implements E, F {
	static int f = 1;
}
'''

example InterfaceDeclaration '''
interface C {
}
'''

example InterfaceDeclaration '''
public interface C extends D, E {
	public static int f = 1;
}
'''

ClassDeclaration
	= { @Modifiers "class" @Identifier @SuperClass (@SuperInterfaces)? @ClassBody #Class }

SuperClass
	= "extends" ClassOrInterfaceType / { `Object` #Name }

SuperInterfaces
	= "implements" ClassOrInterfaceTypes

ClassBody
	= "{" { (@ClassBodyDeclaration)* #Block } "}"

ClassBodyDeclaration
	= ClassMemberDeclaration
	/ { @Block #InstanceInisializer }
	/ { "static" @Block #StaticInitializer }
	/ ConstructorDeclaration

ClassMemberDeclaration
	= FieldDeclaration
	/ MethodDeclaration
	/ ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

InterfaceDeclaration
	= { @Modifiers "interface" @Identifier (@ExtendsInterfaces)? @InterfaceBody #Interface }
	
ExtendsInterfaces
	= "extends" ClassOrInterfaceTypes

InterfaceBody
	= "{" { (@InterfaceMemberDeclaration )* #Block } "}"

InterfaceMemberDeclaration
	= FieldDeclaration
	/ ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

/* Field, Constant */

FieldDeclaration
	= { @Modifiers @Type @InitDeclList #Field } ";"

/* Method */

MethodDeclaration
	= { @Modifiers @TypeOrVoid @Identifier "(" @MethodParamList ")" @Throws (@Block / ";" ) #Method }

MethodParamList
	= { ( @MethodParam ("," @MethodParam)* )? #CommaList }

MethodParam
	= { @Type @VarName #Param }

Throws
	= "throws"? ClassOrInterfaceTypes

// Constructor

ConstructorDeclaration
	= { @Modifiers @ReferenceType "(" @MethodParamList ")" @Throws @ConstructorBody #Constructor }

ConstructorBody
	= { "{" (@ExplicitConstructorInvocation )? ((@Statement / @LocalDeclaration) )* "}" #Block }

ExplicitConstructorInvocation
	= { @{ @This  "(" addArgumentExpressionList? ")" #List } #ExplicitConstructorInvocation } ";"
	/ { @{ @Super "(" addArgumentExpressionList? ")" #List } #ExplicitConstructorInvocation } ";"
	/ { @PostfixExpression "." @Super @{ "(" addArgumentExpressionList? ")" #List } #ExplicitConstructorInvocation  } ";"


// Block, Statement
//===================

Block
	= { "{" ((@Statement / @LocalDeclaration))* "}" #Block }

LocalDeclaration
	= VariableDeclaration ";"
	/ ClassDeclaration

/* Declaration */

format #VarDecl[1] `$[0]`
format #VarDecl[2] `$[0] = $[1]`
format #VarName[1] `$[0][]`
format #VarName[1] `$[0][$[1]]`
format #Array[*] `{$[0 `, ` -1]}`

VariableDeclaration
	= { @Modifiers @Type @InitDeclList #Declaration }

InitDeclList
	= { @InitDecl ("," @InitDecl)* #CommaList }

InitDecl
	= { @VarName ("=" @Initializer)? #VarDecl }

VarName
	= Identifier {@ "[" (@ConstantExpression)? "]" #VarName }*

Initializer
	= Expression
	/ ArrayInitializer

ArrayInitializer
	= { "{" (@Initializer ("," @Initializer)*)? ","? "}" #Array }


/* Statements */

Statement
	= Block
	/ { "assert" @Expression (":" @Expression )? ";" #Assert }
	/ { "if"   "(" @Expression ")" @Statement ( "else" @Statement)? #If }
	/ { "switch" "(" @Expression ")" @Statement #Switch }
	/ { "while"  "(" @Expression ")" @Statement #While }
	/ { "do" @Statement "while" "(" @Expression ")" ";" #DoWhile }
	/ { "for" "(" @VariableDeclaration ";" (@Expression)? ";" (@Expressions)? ")" @Statement #For }
	/ { "for" "(" (@Expressions)?  ";" (@Expression)? ";" (@Expressions)? ")" @Statement #For }
	/ { "goto" @Identifier ";" #Goto }
	/ { "continue" (@Identifier)? ";" #Continue }
	/ { "break" (@Identifier)? ";" #Break }
	/ { "return" (@Expression)? ";" #Return }
	/ { "try" @Block (@CatchBlock )* @{ "finally" @Block #Finally } #Try }
	/ { "try" @Block ( @CatchBlock)+ #Try }
	/ { "throw" @Expression ";" #Throw }
	/ { "synchronized" "(" @Expression ")" @Block #Synchronized }
	/ { "case" @ConstantExpression ":" (!"case" !"default" @Statement)* #SwitchCase }
	/ { "default" ":" (!"case" @Statement)* #SwitchDefault }
	/ { @Identifier ":" #Label }
	/ { @Expression ";" #ExpressionStatement }
	/ { ";" #Empty }

//trycatch

CatchBlock
	= { "catch" "(" @CatchParameter ")" @Block #Catch }

CatchParameter
	= { @ClassOrInterfaceType @Identifier ( "|" @Identifier )* #Declaration }


/* Expression */

format #Comma[2] `$[0], $[1]`
format #Assign[2] `$[0] = $[1]`
format #AssignMul[2] `$[0] *= $[1]`
format #AssignDiv[2] `$[0] /= $[1]`
format #AssignMod[2] `$[0] %= $[1]`
format #AssignAdd[2] `$[0] += $[1]`
format #AssignSub[2] `$[0] -= $[1]`
format #AssignLeftShift[2] `$[0] <<= $[1]`
format #AssignRightShift[2] `$[0] >>= $[1]`
format #AssignLogicalRightShift[2] `$[0] >>>= $[1]`
format #AssignBitwiseAnd[2] `$[0] &= $[1]`
format #AssignBitwiseXOr[2] `$[0] ^= $[1]`
format #AssignBitwiseOr[2] `$[0] != $[1]`
format #Conditional[3] `$[0] ? $[1] : $[2]`
format #LogicalAnd[2] `$[0] && $[1]`
format #LogicalOr[2] `$[0] || $[1]`
format #BitwiseOr[2] `($[0] | $[1])`
format #BitwiseXor[2] `($[0] ^ $[1])`
format #BitwiseAnd[2] `($[0] & $[1])`
format #Equals[2] `$[0] == $[1]`
format #NotEquals[2] `$[0] != $[1]`
format #LessThanEquals[2] `$[0] <= $[1]`
format #LessThan[2] `$[0] < $[1]`
format #GreaterThanEquals[2] `$[0] >= $[1]`
format #GreaterThan[2] `$[0] > $[1]`
format #InstanceOf[2] `$[0] instanceof $[1]`
format #HashIn[2] `$[0] in $[1]`
format #LeftShift[2] `($[0] << $[1])`
format #RightShift[2] `($[0] >> $[1])`
format #LogicalRightShift[2] `($[0] >>> $[1])`
format #Add[2] `($[0] + $[1])`
format #Sub[2] `($[0] - $[1])`
format #Mul[2] `($[0] * $[1])`
format #Div[2] `($[0] / $[1])`
format #Mod[2] `($[0] % $[1])`

/* Unary Operator */
format #PrefixInc[1] `++$[0]`
format #PrefixDec[1] `--$[0]`
format #Plus[1] `+$[0]`
format #Minus[1] `-$[0]`
format #BitwiseNot[1] `~$[0]`
format #LogicalNot[1] `!$[0]`
format #SuffixInc[1] `$[0]++`
format #SuffixDec[1] `$[0]--`

/* Primary */

format #This[0] `this`
format #Array[*] `[$[0 `,` -1]]`
format #Object[*] `{$[0 `,` -1]}`
format #Property[2] `$[0]: $[1]`
format #Field[2] `$[0].$[1]`
format #Index[2] `$[0][$[1]]`
format #List[*] `($[0 `, ` -1])`


public Expression
	= AssignmentExpression

Expressions
	= { @Expression ( "," @Expression)* #Expressions }

AssignmentExpression
	= { @UnaryExpression addAssignmentOperator @Expression }
	/ ConditionalExpression

addAssignmentOperator
	= "="    #Assign
	/ "*="   #AssignMul
	/ "/="   #AssignDiv
	/ "%="   #AssignMod
	/ "+="   #AssignAdd
	/ "-="   #AssignSub
	/ "<<="  #AssignLeftShift
	/ ">>="  #AssignArithmeticRightShift
	/ ">>>=" #AssignLogicalRightShift
	/ "&="   #AssignBitwiseAnd
	/ "^="   #AssignBitwiseXOr
	/ "|="   #AssignBitwiseOr

ConstantExpression
	= ConditionalExpression

ConditionalExpression
	= LogicalOrExpression {@ "?"  @Expression ":" @LogicalOrExpression #Conditional }*

LogicalOrExpression
	= LogicalAndExpression {@ "||" @LogicalAndExpression #Or }*

LogicalAndExpression
	= InclusiveOrExpression {@ "&&" @InclusiveOrExpression #And }*

InclusiveOrExpression
	= ExclusiveOrExpression {@ "|" @ExclusiveOrExpression #BitwiseOr }*

ExclusiveOrExpression
	= AndExpression {@ "^" @AndExpression #BitwiseXor }*

AndExpression
	= EqualityExpression {@ "&" @EqualityExpression #BitwiseAnd }*

EqualityExpression
	= RelationalExpression {@ ( "==" #Equals / "!=" #NotEquals ) @RelationalExpression }*

relationalOperator
	= "<=" #LessThanEquals
	/ ">=" #GreaterThanEquals
	/ "<"  #LessThan
	/ ">"  #GreaterThan

RelationalExpression
	= ShiftExpression {@ ( relationalOperator @ShiftExpression / "instanceof" @ReferenceType #InstanceOf ) }*

ShiftExpression
	= AdditiveExpression {@ ( "<<" #LeftShift / ">>" #ArithmeticRightShift / ">>>" #LogicalRightShift ) @AdditiveExpression }*

AdditiveExpression
	= MultiplicativeExpression {@ ( "+" #Add / "-" #Sub ) @MultiplicativeExpression }*

MultiplicativeExpression
	= CastNewExpression {@ ( "*" #Mul / "/" #Div / "%" #Mod ) @CastNewExpression }*

CastNewExpression
	= { "(" @Type ")" @CastNewExpression #Cast }
	/ UnaryExpression

UnaryExpression
	= PostfixExpression
	/ { "++" @UnaryExpression #PrefixInc }
	/ { "--" @UnaryExpression #PrefixDec }
	/ { "+"  @CastNewExpression #Plus }
	/ { "-"  @CastNewExpression #Minus }
	/ { "~"  @CastNewExpression #Compl }
	/ { "!"  @CastNewExpression #Not }

PostfixExpression
	= PrimaryExpression {@ (addMethodCall / addInstanceCreation / addIndex / addField / addMethodReference / addInc / addDec ) }*

addMethodCall
	= "." @Identifier @{ "(" addArgumentExpressionList? ")" #List } #Method

addInstanceCreation
	= "." "new" @ClassOrInterfaceType @{ "(" addArgumentExpressionList? ")" #List } ( @ClassBody)? #InstanceCreation

addArgumentExpressionList
	= (@Expression ("," @Expression)*)

addIndex
	= "[" @Expression "]" #Index

addField
	= "." @Identifier !'(' #Field

addMethodReference
	= "::" @Identifier #MethodReference

addInc
	= "++" #Inc

addDec
	= "--" #Dec

public PrimaryExpression
	= Constant
	/ This
	/ Super
	/ "(" Expression ")"
	/ ClassLiteral
	/ { @QualifiedName "." "this" #This }
	/ { @QualifiedName "." "super" #Super }
	/ MethodInvocationExpression
	/ InstanceCreationExpression
	/ ArrayCreationExpression
	/ MethodReference
	/ Identifier


ClassLiteral
	= { @TypeOrVoid  "." "class" #ClassLiteral }

This
	= { "this" #This }

Super
	= { "super" #Super }

MethodInvocationExpression
	= { @Identifier @{ "(" addArgumentExpressionList? ")" #List } #Method }

InstanceCreationExpression
	= { "new" @ClassOrInterfaceType @{ "(" addArgumentExpressionList? ")" #List } ( @ClassBody)? #InstanceCreation }

ArrayCreationExpression
	= { "new"  @(NonArrayType {@ "[" @Expression "]" #ArraySize }+ {@ "["  "]" #ArraySize }* ) #ArrayCreation }
	/ { "new"  @(NonArrayType {@  "[" "]" #ArraySize }+ ) @ArrayInitializer #ArrayCreation }

MethodReference
	= { @ReferenceType "::" @(Identifier / { "new" #Name } ) #MethodReference }

/* Identifier */

format #Name[0] `${text}`
format #QualifiedName[2] `$[0].$[1]`

example Identifier name$java
example QualifiedName java.io.Lang

public Identifier
	= { NAME #Name } _

public QualifiedName
	= Identifier {@ "." @Identifier #QualifiedName }*

W
	= [A-Za-z0-9_$]

LETTER
	= [A-Za-z_]

NAME
	= !KEYWORD LETTER W*

/* Type */

format #Tvoid[0]      `void`
format #Tbyte[0]      `byte`
format #Tshort[0]     `short`
format #Tint[0]       `int`
format #Tlong[0]      `long`
format #Tfloat[0]     `float`
format #Tdouble[0]    `double`

format #Tarray[1]     `$[0][]`

example ArrayType&Type int[]

public Type
	= ReferenceType    /* to accept int[] */
	/ PrimitiveType

ReferenceType
	= ArrayType
	/ ClassOrInterfaceType

ArrayType
	= (PrimitiveType / ClassOrInterfaceType ) {@ "[" "]" #Tarray }+

ClassOrInterfaceType
	= ClassType 
	/ InterfaceType
	
ClassType
	= QualifiedName

InterfaceType
	= ClassType

public PrimitiveType
	= NumericType
	/ BooleanType

NumericType
	= IntegralType 
	/ FloatingPointType

IntegralType
	= { "byte"    #Tbyte }
	/ { "char"    #Tchar }
	/ { "short"   #Tshort }
	/ { "int"     #Tint }
	/ { "long"    #Tlong }

FloatingPointType
	= { "float"   #Tfloat }
	/ { "double"  #Tdouble }

BooleanType
	= { "boolean" #Tboolean }

Void
	= { "void"    #Tvoid }

TypeOrVoid
	= Type 
	/ Void

NonArrayType
	= ClassOrInterfaceType 
	/ PrimitiveType

ClassOrInterfaceTypes
	= { ( @ClassOrInterfaceType ("," @ClassOrInterfaceType)* )? #CommaList }


/* Literal, Constant */

format #Null[0]   `null`
format #True[0]   `true`
format #False[0]  `false`

format #Integer[0] `${text}`
format #Long[0]    `${text}`
format #Float[0]   `${text}`
format #Double[0]  `${text}`

format #String[0]    `"${text}"`
format #Character[0] `'${text}'`

Literal
	= FloatingPointLiteral 
	/ IntegerLiteral 
	/ BooleanLiteral 
	/ CharacterLiteral 
	/ StringLiteral 
	/ NullLiteral

Constant
	= Literal

NullLiteral
	= { "null" #Null }

BooleanLiteral
	= { "true"  #True }
	/ { "false" #False }

IntegerLiteral
	= { ( DECIMAL / HEXADECIMAL / BINARY / OCTAL ) (INT_SUFFIX #Long / FLOAT_SUFFIX #Float / #Integer) } _

DECIMAL
	= '0' ![bBxX0-9_]
	/ [1-9] ('_'* DIGIT)*

HEXADECIMAL
	= '0' [xX] HEX ('_'* HEX)*

BINARY
	= '0' [bB] [01] ('_'* [01])*

OCTAL
	= '0' ('_'* [0-7])*

DIGIT
	= [0-9]

HEX
	= [a-fA-F0-9]

INT_SUFFIX
	= [lL]

FloatingPointLiteral
	= { FLOAT #Float } FLOAT_SUFFIX? _
	/ { DECIMAL #Float } FLOAT_SUFFIX _

FLOAT
	= FRACTION EXPONENT?
	/ DIGIT+ EXPONENT

FLOAT_SUFFIX
	= [fFdD]

FRACTION
	= !'_' ('_'* DIGIT)* '.' DIGIT ('_'* DIGIT)*
	/ DIGIT ('_'* DIGIT)* '.'

EXPONENT
	= [eE] [+\-]? DIGIT ('_'* DIGIT)*

StringLiteral
	= '"' { STRING_CONTENT* #String } '"' _

CharacterLiteral
	= '\'' { CHAR_CONTENT* #Character } '\'' _

STRING_CONTENT
	= ESCAPE
	/ ![\"\n\\] .

CHAR_CONTENT
	= ESCAPE
	/ !['\n\\] .

ESCAPE
	= SIMPLE_ESCAPE
	/ OCTAL_ESCAPE
	/ HEX_ESCAPE

SIMPLE_ESCAPE
	= '\\' ['\"\\bfnrt]

OCTAL_ESCAPE
	= '\\' [0-3] [0-7] [0-7]
	/ '\\' [0-7] [0-7]
	/ '\\' [0-7]

HEX_ESCAPE
	= '\\' 'u'+ HEX4

HEX4
	= HEX HEX HEX HEX

